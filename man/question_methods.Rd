% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/question_methods.R
\name{question_initialize_input}
\alias{question_initialize_input}
\alias{question_completed_input}
\alias{question_is_valid}
\alias{question_is_correct}
\alias{question_try_again_input}
\title{Custom question methods.}
\usage{
question_initialize_input(question, answer_input, ...)

question_completed_input(question, answer_input, ...)

question_is_valid(question, answer_input, ...)

question_is_correct(question, answer_input, ...)

question_try_again_input(question, answer_input, ...)
}
\arguments{
\item{question}{\link{question} object used}

\item{answer_input}{user input value}

\item{...}{future parameter expansion and custom arguments to be used in dispatched s3 methods.}
}
\description{
There are four methods used to define a custom question.  Each s3 method
should correspond to the \code{type = TYPE} supplied to the question.
\itemize{
\item \code{question_initialize_input.TYPE(question, answer_input, ...)}
\itemize{
\item Determines how the question is initially displayed to the users. This
should return an shiny UI object that can be displayed using
\code{[shiny::renderUI]. In the case of }question_initialize_input.radio`, it
returns a \link[shiny:radioButtons]{shiny::radioButtons} object. This method will be re-executed if
the question is attempted again.
}
\item \code{question_completed_input.TYPE(question, ...)}
\itemize{
\item Determines how the question is displayed after a submission.  Just like
\code{question_initialize_input}, this method should return an shiny UI object
that can be displayed using \link[shiny:renderUI]{shiny::renderUI}.
}
\item \code{question_is_valid.TYPE(question, answer_input, ...)}
\itemize{
\item This method should return a boolean that determines if the input answer is
valid.  Depending on the value, this function enables and disables the
submission button.
}
\item \code{question_is_correct.TYPE(question, answer_input, ...)}
\itemize{
\item This function should return the output of \link{question_is_correct_value}.
\link{question_is_correct_value} allows for custom messages in addition to the
determination of an answer being correct.  See \link{question_is_correct_value}
for more details.
}
}
}
\seealso{
For more information and question type extension examples, please view the \code{question_type} tutorial: \code{learnr::run_tutorial("question_type", "learnr")}.
}
