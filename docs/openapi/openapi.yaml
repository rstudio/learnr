swagger: "2.0"
info:
  title: External Evaluator Service
  description: Service for remotely invoking R for learnr exercises
  version: ""
host: 0.0.0.0:8080
consumes:
- application/json
produces:
- application/json
paths:
  /learnr/:
    post:
      tags:
      - srvr
      summary: initiate session srvr
      description: Initiate a session in which exercises can be evaluated
      operationId: srvr#initiate session
      parameters:
      - name: Initiate SessionRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/SrvrInitiateSessionRequestBody'
          required:
          - global_setup
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/SrvrInitiateSessionResponseBody'
            required:
            - id
      schemes:
      - http
  /learnr/{session_id}:
    post:
      tags:
      - srvr
      summary: evaluate exercise srvr
      description: Evaluate an exercise in a given session
      operationId: srvr#evaluate exercise
      parameters:
      - name: session_id
        in: path
        description: The ID of session obtained during session initiation
        required: true
        type: string
      - name: Evaluate ExerciseRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/SrvrEvaluateExerciseRequestBody'
          required:
          - code
          - options
      responses:
        "200":
          description: The server was able to fulfill the request. This does _not_
            imply that the provided R code didn't produce an error -- just that we
            were able to run it through to completion.
          schema:
            $ref: '#/definitions/SrvrEvaluateExerciseResponseBody'
            required:
            - feedback
            - error_message
            - timeout_exceeded
            - html_output
      schemes:
      - http
  /openapi.json:
    get:
      tags:
      - srvr
      summary: Download ./gen/http/openapi.json
      operationId: srvr#/openapi.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
definitions:
  Exercise FeedbackResponseBody:
    title: Exercise FeedbackResponseBody
    type: object
    properties:
      ' location ':
        type: string
        description: Location for feedback (“append”, “prepend”, or “replace”).
        example: Facilis sed reiciendis pariatur doloribus aut.
      correct:
        type: boolean
        description: TRUE/FALSE logical value indicating whether the submitted answer
          was correct.
        example: false
      message:
        type: string
        description: Feedback message. Can be a plain character vector or can HTML
          produced via the htmltools package.
        example: Expedita rem et dolore ut et.
      type:
        type: string
        description: Feedback type (visual presentation style). Can be “auto”, “success”,
          “info”, “warning”, “error”, or “custom”. Note that “custom” implies that
          the “message” field is custom HTML rather than a character vector.
        example: Quis hic quis similique.
    example:
      ' location ': Id fugit adipisci repellat ea voluptatem et.
      correct: false
      message: Ipsam deserunt voluptatem fugit beatae.
      type: Omnis vero.
  Exercise OptionsRequestBody:
    title: Exercise OptionsRequestBody
    type: object
    properties:
      error:
        type: boolean
        example: false
      exercise.checker:
        type: array
        items:
          type: string
          example: Dicta hic saepe ipsa.
        example:
        - 'function (label, user_code, check_code, envir_result, evaluate_result, '
        - '    ...) '
        - '{'
        - '    list(message = check_code, correct = TRUE, location = "append")'
        - '}'
      exercise.df_print:
        type: string
        example: paged
      exercise.timelimit:
        type: integer
        description: The time limit for the exercise, in seconds
        default: 30
        example: 30
        format: int64
      fig.align:
        type: string
        example: default
      fig.height:
        type: number
        example: 4
        format: float
      fig.keep:
        type: string
        example: high
      fig.retina:
        type: number
        example: 2
        format: float
      fig.show:
        type: string
        example: asis
      fig.width:
        type: number
        example: 6.5
        format: float
      message:
        type: boolean
        example: true
      out.width:
        type: integer
        example: 624
        format: int64
      warning:
        type: boolean
        example: true
    description: The options corresponding to the exercise. These are generally obtained
      from knitr code chunk options.
    example:
      error: false
      exercise.checker:
      - 'function (label, user_code, check_code, envir_result, evaluate_result, '
      - '    ...) '
      - '{'
      - '    list(message = check_code, correct = TRUE, location = "append")'
      - '}'
      exercise.df_print: paged
      exercise.timelimit: 30
      fig.align: default
      fig.height: 4
      fig.keep: high
      fig.retina: 2
      fig.show: asis
      fig.width: 6.5
      message: true
      out.width: 624
      warning: true
  SrvrEvaluateExerciseRequestBody:
    title: SrvrEvaluateExerciseRequestBody
    type: object
    properties:
      check:
        type: string
        description: TODO
        example: Similique eum ex.
      code:
        type: string
        description: The R code to execute
        example: rnorm(5)
      code_check:
        description: TODO
        example: Vitae necessitatibus nostrum.
      global_setup:
        type: string
        description: Setup code from the `setup-global-exercise` or `setup` chunk
          that should be run before every exercise
        example: library(ggplot2)
      options:
        $ref: '#/definitions/Exercise OptionsRequestBody'
      restore:
        type: boolean
        description: TODO
        example: true
      setup:
        type: string
        description: Setup code associated with this specific exercise
        example: dataset <- iris
      solution:
        type: string
        description: Unused, the solution code for this exercise
        example: rnorm(1)
    example:
      check: Repellendus dolorum.
      code: rnorm(5)
      code_check: Officiis consequatur.
      global_setup: library(ggplot2)
      options:
        error: false
        exercise.checker:
        - 'function (label, user_code, check_code, envir_result, evaluate_result, '
        - '    ...) '
        - '{'
        - '    list(message = check_code, correct = TRUE, location = "append")'
        - '}'
        exercise.df_print: paged
        exercise.timelimit: 30
        fig.align: default
        fig.height: 4
        fig.keep: high
        fig.retina: 2
        fig.show: asis
        fig.width: 6.5
        message: true
        out.width: 624
        warning: true
      restore: true
      setup: dataset <- iris
      solution: rnorm(1)
    required:
    - code
    - options
  SrvrEvaluateExerciseResponseBody:
    title: SrvrEvaluateExerciseResponseBody
    type: object
    properties:
      error_message:
        type: string
        description: If an error occurred, the plain-text representation
        example: object 'x' not found
      feedback:
        $ref: '#/definitions/Exercise FeedbackResponseBody'
      html_output:
        type: string
        description: The output of the given command
        example: |2



          <pre><code>[1] -0.78207928  0.70263075 -0.08438296 -0.06020523  1.97638361</code></pre>
      timeout_exceeded:
        type: boolean
        description: True if the time limit was exceeded; otherwise false
        example: true
    example:
      error_message: object 'x' not found
      feedback:
        ' location ': Dolores est nisi officiis voluptatum natus.
        correct: true
        message: Facilis omnis nemo dolorum quos.
        type: Saepe qui quos adipisci quod.
      html_output: |2



        <pre><code>[1] -0.78207928  0.70263075 -0.08438296 -0.06020523  1.97638361</code></pre>
      timeout_exceeded: true
    required:
    - feedback
    - error_message
    - timeout_exceeded
    - html_output
  SrvrInitiateSessionRequestBody:
    title: SrvrInitiateSessionRequestBody
    type: object
    properties:
      global_setup:
        type: string
        description: Setup code from the `setup-global-exercise` or `setup` chunk
          that should be run before every exercise
        example: library(tidyverse)
    example:
      global_setup: library(tidyverse)
    required:
    - global_setup
  SrvrInitiateSessionResponseBody:
    title: SrvrInitiateSessionResponseBody
    type: object
    properties:
      id:
        type: string
        description: The ID of the session generated
        example: 8rmci3kdkc
    example:
      id: 8rmci3kdkc
    required:
    - id
